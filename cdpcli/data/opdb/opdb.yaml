x-generated: Automatically generated by CDP protoc plugin. Do not edit manually.
swagger: '2.0'
x-endpoint-name: opdb
x-products: CDP
x-form-factors: public
x-cdp-releases: PUBLIC
info:
  version: 0.9.99
  title: Operational Database service
  license:
    name: Apache 2.0
  description: Interact with the Cloudera Operational Database service
  termsOfService: https://www.cloudera.com/legal/commercial-terms-and-conditions.html
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/opdb/collectDiagnostics:
    post:
      summary: Collect diagnostic data bundles from the database
      description: returns details of running command
      operationId: collectDiagnostics
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/CollectDiagnosticsRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/CollectDiagnosticsResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/createDatabase:
    post:
      summary: Create opDb
      description: Create a operational database in a environment
      operationId: createDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/CreateDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: true
  /api/v1/opdb/describeClientConnectivity:
    post:
      summary: Returns client connectivity details
      description: Returns details to enable programmatic client connectivity for a database
      operationId: describeClientConnectivity
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeClientConnectivityRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/DescribeClientConnectivityResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/describeDatabase:
    post:
      summary: Describe a opDb
      description: Details about the operational database
      operationId: describeDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/DescribeDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/describeUpgradeDatabase:
    post:
      summary: Describes the upgrade availability.
      description: Describes the upgrade availability for an operational database.
      operationId: describeUpgradeDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUpgradeDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/DescribeUpgradeDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/dropDatabase:
    post:
      summary: drop a opDb
      description: drop the operational database
      operationId: dropDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/DropDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/DropDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: true
  /api/v1/opdb/listDatabases:
    post:
      summary: List all opDbs in an environment
      description: Fetch a list of all operational databases in an environment
      operationId: listDatabases
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListDatabasesRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/ListDatabasesResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/listDiagnostics:
    post:
      summary: List all diagnostics associated to the database
      description: returns list of diagnostics collections
      operationId: listDiagnostics
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListDiagnosticsRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/ListDiagnosticsResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/listSupportedEnvironments:
    post:
      summary: List of environments available for the database creation
      description: Fetches a list of environments available for the database creation
      operationId: listSupportedEnvironments
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListSupportedEnvironmentsRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/ListSupportedEnvironmentsResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: false
  /api/v1/opdb/startDatabase:
    post:
      summary: Starts the database
      description: Starts a previously stopped database
      operationId: startDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/StartDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: true
  /api/v1/opdb/stopDatabase:
    post:
      summary: Stops the database
      description: Stops a running database
      operationId: stopDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/StopDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: true
  /api/v1/opdb/upgradeDatabase:
    post:
      summary: Upgrades the database.
      description: Upgrades an operational database in an environment to a given runtime.
      operationId: upgradeDatabase
      parameters:
        - name: input
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpgradeDatabaseRequest'
      responses:
        200:
          description: Expected response to a valid request.
          schema:
            $ref: '#/definitions/UpgradeDatabaseResponse'
        default:
          description: The default response on an error.
          schema:
            $ref: '#/definitions/Error'
      x-mutating: true
definitions:
  Error:
    type: object
    description: An object returned on an error.
    properties:
      code:
        type: string
        description: The error code.
      message:
        type: string
        description: The error message.
  DiagnosticsBundle:
    type: object
    description: Describe a diagnostics bundle
    properties:
      id:
        type: string
        description: Identifier for each bundle collection
      crn:
        type: string
        description: The object on which diagnostics was collected
      startTime:
        type: string
        format: date-time
        description: Start time
      endTime:
        type: string
        format: date-time
        description: The end time, if the command is finished.
      status:
        type: string
        description: A status of the diagnostics collection process
      result:
        type: string
        description: If this is a download, a link to the download location of the bundle
  CollectDiagnosticsRequest:
    type: object
    description: Enables starting collection of the diagnostics. This is an asynchronous API and not expected to block.
    required:
      - environmentName
      - databaseName
      - endTime
    properties:
      environmentName:
        type: string
        description: The name of the environment
      databaseName:
        type: string
        description: The name of the database
      endTime:
        type: string
        description: The end time (in ISO 8601 format) of the period to collection statistics for.
      startTime:
        type: string
        description: The start time (in ISO 8601 format) of the period to collection statistics for.
  CollectDiagnosticsResponse:
    type: object
    description: Information about diagnostic bundle generation
    properties:
      diagnosticsBundle:
        description: Details of requested diagnostic bundle collection
        $ref: '#/definitions/DiagnosticsBundle'
  ListDiagnosticsRequest:
    type: object
    description: Lists the in-progress diagnostic bundle operations.
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: The name of the environment
      databaseName:
        type: string
        description: The name of the database
  ListDiagnosticsResponse:
    type: object
    description: The list of in-progress diagnostic bundle operations
    properties:
      diagnosticsBundles:
        type: array
        items:
          $ref: '#/definitions/DiagnosticsBundle'
        description: List of diagnostics operations
  CreateDatabaseRequest:
    type: object
    description: A request to create the database
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: environment name
      databaseName:
        type: string
        description: database name
  CreateDatabaseResponse:
    type: object
    description: A response which gives status of the database creation
    required:
      - databaseDetails
    properties:
      databaseDetails:
        description: Details of the Database created
        $ref: '#/definitions/DatabaseDetails'
  DropDatabaseRequest:
    type: object
    description: A request to drop the database
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: environment name
      databaseName:
        type: string
        description: database name
  DropDatabaseResponse:
    type: object
    description: A response which gives status of the database deletion
    properties:
      status:
        description: status of delete database request
        $ref: '#/definitions/StatusType'
  ListSupportedEnvironmentsRequest:
    type: object
    description: A request to get a list of available environments
  Environment:
    type: object
    description: Details of the environment
    required:
      - crn
      - name
    properties:
      crn:
        type: string
        description: The crn of the environment
      name:
        type: string
        description: The name of the environment
  ListSupportedEnvironmentsResponse:
    type: object
    description: A response which contains a list of available environments
    properties:
      environments:
        type: array
        items:
          $ref: '#/definitions/Environment'
        description: The crn of the environment
  StatusType:
    type: string
    description: status of the database
    enum:
      - REQUESTED
      - CREATE_IN_PROGRESS
      - AVAILABLE
      - UPDATE_IN_PROGRESS
      - UPDATE_REQUESTED
      - UPDATE_FAILED
      - CREATE_FAILED
      - ENABLE_SECURITY_FAILED
      - PRE_DELETE_IN_PROGRESS
      - DELETE_IN_PROGRESS
      - DELETE_FAILED
      - DELETE_COMPLETED
      - STOPPED
      - STOP_REQUESTED
      - START_REQUESTED
      - STOP_IN_PROGRESS
      - START_IN_PROGRESS
      - START_FAILED
      - STOP_FAILED
      - WAIT_FOR_SYNC
      - MAINTENANCE_MODE_ENABLED
      - REQUESTING
      - MISSING
      - BACKUP_IN_PROGRESS
      - BACKUP_FAILED
      - BACKUP_FINISHED
      - RESTORE_IN_PROGRESS
      - RESTORE_FAILED
      - RESTORE_FINISHED
      - DELETED_ON_PROVIDER_SIDE
      - AMBIGUOUS
      - EXTERNAL_DATABASE_CREATION_IN_PROGRESS
      - EXTERNAL_DATABASE_CREATION_FAILED
      - EXTERNAL_DATABASE_DELETION_IN_PROGRESS
      - EXTERNAL_DATABASE_DELETION_FINISHED
      - EXTERNAL_DATABASE_DELETION_FAILED
      - UNKNOWN
      - EXTERNAL_DATABASE_START_IN_PROGRESS
      - EXTERNAL_DATABASE_START_FINISHED
      - EXTERNAL_DATABASE_START_FAILED
      - EXTERNAL_DATABASE_STOP_IN_PROGRESS
      - EXTERNAL_DATABASE_STOP_FINISHED
      - EXTERNAL_DATABASE_STOP_FAILED
      - LOAD_BALANCER_UPDATE_IN_PROGRESS
      - LOAD_BALANCER_UPDATE_FINISHED
      - LOAD_BALANCER_UPDATE_FAILED
      - UNREACHABLE
      - NODE_FAILURE
      - RECOVERY_IN_PROGRESS
      - RECOVERY_REQUESTED
      - RECOVERY_FAILED
  ListDatabasesRequest:
    type: object
    description: A request to list databases
    properties:
      environmentName:
        type: string
        description: name of the environment
  ListDatabasesResponse:
    type: object
    description: A list of databases in response
    required:
      - databases
    properties:
      databases:
        type: array
        items:
          $ref: '#/definitions/DatabaseDetails'
        description: The details of the database
  DatabaseDetails:
    type: object
    description: Details of the databases.
    required:
      - databaseName
      - environmentCrn
      - crn
      - creationDate
    properties:
      databaseName:
        type: string
        description: The name of the database.
      environmentCrn:
        type: string
        description: environment crn
      crn:
        type: string
        description: database crn
      creationDate:
        type: string
        format: date-time
        description: The creation time of the database
      status:
        description: Status of the database creation
        $ref: '#/definitions/StatusType'
      creatorCrn:
        type: string
        description: Crn of the creator
      dbVersion:
        type: string
        description: Database version
      hueEndpoint:
        type: string
        description: Hue endpoint
      environmentName:
        type: string
        description: Environment name
      storageLocation:
        type: string
        description: HBase cloud storage location
      internalName:
        type: string
        description: Internal cluster name for this database
  DescribeDatabaseRequest:
    type: object
    description: request to get details of the database in a particular environment
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: The name of the environment.
      databaseName:
        type: string
        description: The name of the database.
  DescribeDatabaseResponse:
    type: object
    description: Details of the database.
    properties:
      databaseDetails:
        description: The details of the database.
        $ref: '#/definitions/DatabaseDetails'
  StartDatabaseRequest:
    type: object
    description: Start the database.
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: The name of the environment
      databaseName:
        type: string
        description: The name of the database.
  StartDatabaseResponse:
    type: object
    description: A response from starting the database.
    properties:
      wasStarted:
        type: boolean
        description: True if the database start request accepted
      previousStatus:
        description: The status of the database prior to the start request.
        $ref: '#/definitions/StatusType'
  StopDatabaseRequest:
    type: object
    description: Stop the database.
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: The name of the environment
      databaseName:
        type: string
        description: The name of the database.
  StopDatabaseResponse:
    type: object
    description: A response from stopping the database.
    properties:
      wasStopped:
        type: boolean
        description: True if the database stop request accepted
      previousStatus:
        description: The status of the database prior to the stop request.
        $ref: '#/definitions/StatusType'
  DescribeClientConnectivityRequest:
    type: object
    description: A request for client API connectivity to a database.
    required:
      - environmentName
      - databaseName
    properties:
      environmentName:
        type: string
        description: The name of the environment
      databaseName:
        type: string
        description: The name of the database
  KerberosConfiguration:
    type: object
    description: Configuration information to enable Kerberos authentication
    properties:
      kdcHost:
        type: string
        description: The hostname of the KDC
      realm:
        type: string
        description: The Kerberos realm
      krb5Conf:
        type: string
        description: A base64-encoded krb5.conf file
  Kind:
    type: string
    description: "A categorization of a connector to describe how it is broadly used.\n `LIBRARY` - A client library or API which user's code invokes `JDBC` - A JDBC driver `SERVICE` - A Service URL `ENVIRONMENT` - An environment to use to run other commands and tools `ODBC` - An ODBC driver"
    enum:
      - LIBRARY
      - JDBC
      - SERVICE
      - ENVIRONMENT
  DependencyManagement:
    type: object
    description: Information about dependencies necessary to use a connector.
    properties:
      mavenUrl:
        type: string
        description: The URL of a Maven repository containing the client JARs.
  ClientConfigurationDetails:
    type: object
    description: A URL which holds information necessary to configure a Connector.
    properties:
      name:
        type: string
        description: The name of this configuration
      url:
        type: string
        description: The URL from which to fetch the configuration
  ConnectorConfiguration:
    type: object
    description: Runtime details necessary to use a connector.
    properties:
      clientConfigurationDetails:
        type: array
        items:
          $ref: '#/definitions/ClientConfigurationDetails'
        description: Configuration information required to use a Connector
      jdbcUrl:
        type: string
        description: A base JDBC URL if the connector is a JDBC driver.
      serviceUrl:
        type: string
        description: A base service URL
  Connector:
    type: object
    description: Information to use to connect to a database via some mechanism.
    properties:
      name:
        type: string
        description: The name of the API/Library this connector represents.
      version:
        type: string
        description: The version of the connector.
      kind:
        description: A categorization of this connector.
        $ref: '#/definitions/Kind'
      dependencies:
        description: Software dependency information necessary to use the connector.
        $ref: '#/definitions/DependencyManagement'
      configuration:
        description: Runtime details required to use the connector.
        $ref: '#/definitions/ConnectorConfiguration'
      requiresKerberos:
        type: boolean
        description: True if the connector requires Kerberos to authenticate.
  DescribeClientConnectivityResponse:
    type: object
    description: A response with client API connectivity to a database.
    properties:
      connectors:
        type: array
        items:
          $ref: '#/definitions/Connector'
        description: Available connectors for this database
      kerberosConfiguration:
        description: Kerberos configuration information
        $ref: '#/definitions/KerberosConfiguration'
  UpgradeDatabaseRequest:
    type: object
    description: Asynchronous request to upgrade the CDP Runtime for a database.
    properties:
      environment:
        type: string
        description: The name or CRN of the environment.
      database:
        type: string
        description: The name or CRN of the database.
      runtime:
        type: string
        description: The CDP Runtime version to upgrade to.
      osUpgradeOnly:
        type: boolean
        description: Only perform an Operating System upgrade.
  UpgradeDatabaseResponse:
    type: object
    description: Response with the reason whether upgrade request is accepted or why it is not possible.
    properties:
      statusReason:
        type: string
        description: The reason whether upgrade request is accepted or why it is not possible.
  DescribeUpgradeDatabaseRequest:
    type: object
    description: Request to describe the upgrade availability of CDP Runtime and Operating System for a database.
    required:
      - environment
      - database
    properties:
      environment:
        type: string
        description: The name or CRN of the environment.
      database:
        type: string
        description: The name or CRN of the database.
  DescribeUpgradeDatabaseResponse:
    type: object
    description: Response with upgrade availability of CDP Runtime and Operating System for a database.
    properties:
      statusReason:
        type: string
        description: The reason whether upgrade request is accepted or why it is not possible.
      currentComponentVersion:
        description: Versions of currently deployed CDP runtime and operating system.
        $ref: '#/definitions/ComponentsVersion'
      availableComponentVersions:
        type: array
        items:
          $ref: '#/definitions/ComponentsVersion'
        description: List of available versions for upgrade.
      isOSUpgradeAvailable:
        type: boolean
        description: Is an OS upgrade available.
      isRuntimeUpgradeAvailable:
        type: boolean
        description: Is a CDP Runtime upgrade available.
  ComponentsVersion:
    type: object
    description: Versions of the CDP runtime and Operating system components.
    properties:
      cm:
        type: string
        description: Version of Cloudera Manager.
      cdp:
        type: string
        description: CDP Runtime version.
      os:
        type: string
        description: Operation System name and version.
      osPatchLevel:
        type: string
        description: Operation System patch level.
x-audit: true
